// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// posterior
List posterior(IntegerVector y, int p, List prior, int burn_in, int N, unsigned int random_seed, bool verbose);
RcppExport SEXP _pyinar_posterior(SEXP ySEXP, SEXP pSEXP, SEXP priorSEXP, SEXP burn_inSEXP, SEXP NSEXP, SEXP random_seedSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type random_seed(random_seedSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(posterior(y, p, prior, burn_in, N, random_seed, verbose));
    return rcpp_result_gen;
END_RCPP
}
// generalized_median
int generalized_median(NumericVector pred);
RcppExport SEXP _pyinar_generalized_median(SEXP predSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pred(predSEXP);
    rcpp_result_gen = Rcpp::wrap(generalized_median(pred));
    return rcpp_result_gen;
END_RCPP
}
// predictive_distribution_prop
NumericVector predictive_distribution_prop(List model, int h);
RcppExport SEXP _pyinar_predictive_distribution_prop(SEXP modelSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(predictive_distribution_prop(model, h));
    return rcpp_result_gen;
END_RCPP
}
// predictive_distribution_mc
NumericVector predictive_distribution_mc(List model, int h, int replications);
RcppExport SEXP _pyinar_predictive_distribution_mc(SEXP modelSEXP, SEXP hSEXP, SEXP replicationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type replications(replicationsSEXP);
    rcpp_result_gen = Rcpp::wrap(predictive_distribution_mc(model, h, replications));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pyinar_posterior", (DL_FUNC) &_pyinar_posterior, 7},
    {"_pyinar_generalized_median", (DL_FUNC) &_pyinar_generalized_median, 1},
    {"_pyinar_predictive_distribution_prop", (DL_FUNC) &_pyinar_predictive_distribution_prop, 2},
    {"_pyinar_predictive_distribution_mc", (DL_FUNC) &_pyinar_predictive_distribution_mc, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_pyinar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
